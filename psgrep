#!/usr/bin/env perl
# psgrep - greps process list
#
# Licensed under Artistic License 2.0. See AUTHOR section at bottom of
# script for details.

use warnings;
use strict;

use Data::Dumper;
$Data::Dumper::Indent = 1;

use Getopt::Long qw/:config posix_default bundling no_ignore_case/;
use Pod::Usage;

my $LONG_FORMAT;
my $PID_ONLY;
my @ADD_KEYWORDS;

my $DEBUG;
my $DUMP_PSDATA_FILE;
my $DEBUG_PSDATA_FILE;

my $help_level;
GetOptions(
    'long|f'      => \$LONG_FORMAT,
    'pid|p'       => \$PID_ONLY,
    'output|o=s'  => \@ADD_KEYWORDS,

    'help|h'      => sub { $help_level = 1 },
    'man',        => sub { $help_level = 2 },

    'D'             => \$DEBUG,
    'test-psdata=s' => \$DEBUG_PSDATA_FILE,
    'dump-psdata=s' => \$DUMP_PSDATA_FILE,
) or pod2usage(-verbose => 1);

pod2usage(-verbose => $help_level) if $help_level;

my @LONG_KEYWORDS = qw/uid pid ppid stat tty time command/;

my $COMPARISON_OPS = qr/(?:[<>=]|\s(?:eq|ne)\s|[!=]~)/;

my $DEBUG_DID_DP = 0;


# uniq - taken from List::MoreUtils to eliminate dependency on
# that module. Written by Eric J. Roode, Tassilo von Parseval,
# and Adam Kennedy.
sub uniq (@) {
    my %seen = ();
    grep { not $seen{$_}++ } @_;
}

# none and max - aren't available in older versions of List::Util, so
# we include them here.
sub none (&@) {
    my $sub = shift;
    for (@_) {
        return if &$sub($_);
    }
    return 1;
}

sub max {
    my $max = shift;
    no warnings 'uninitialized';
    for (@_) {
        $max = $_ if $_ > $max;
    }
    return $max;
}


# get our operations
sub main {
    my @ops = get_ops_from_args(@ARGV);
    pod2usage("error: no arguments") unless @ops;

    my @keywords = map { $_->[0] } @ops;

    push(@keywords, @LONG_KEYWORDS) if $LONG_FORMAT;
    @keywords = fixup_keywords(@keywords, @ADD_KEYWORDS);

    # now call ps
    my @processes = grep_ps(\@keywords, \@ops);

    my $lengths_ref = pop(@processes);   # pop the lengths off the end
    my $headers_ref = shift(@processes); # and the headers off the front

    # exit if there are no actual processes
    exit 0 unless scalar(@processes);

    # build a format string
    if ($PID_ONLY) {
        @keywords = ('pid');
        undef $headers_ref;
    }
    my $format_str = build_format_str(\@keywords, $lengths_ref);

    foreach my $proc_ref ($headers_ref, @processes) {
        print_formatted($format_str, \@keywords, $proc_ref);
    }
}


sub fixup_keywords {
    my(@input) = @_;
    my @return;
    my %seen;

    @input = split(/,/, join(',', @input));
    foreach my $key (@input) {
        next if $seen{$key};
        next if $key =~ /^(?:pid|command)$/;

        push @return, $key;
        $seen{$key} = 1;
    }

    @return = ('pid', @return, 'command');
    return @return;
}


sub get_ops_from_args {
    my @args = @_;
    my @ops;

    return unless @args;

    # special-case a plain regex in first position
    my $firstarg = shift @args;
    if ($firstarg =~ m[^/(.+)/([ixauld]*)]) {
        # if it looks like a /regex/, treat it as one
        my ($re, $flags) = ($1, $2);
        push @ops, [ command => "=~ m/$re/$flags" ];
    }
    elsif ($firstarg !~ $COMPARISON_OPS) {
        push @ops, [ command => "=~ m/$firstarg/i" ];
    }
    else {
        # OK, the first argument isn't special, so
        # let the regular op-parser have at it
        unshift @args, $firstarg;
    }

    foreach my $arg (@args) {
        # here, we look for keyword+everything-else
        if ($arg =~ /^(\w+)(\W.+)$/) {
            my ($keyword, $rest) = ($1, $2);

            # ps requires keywords to be lower-case
            $keyword = lc($keyword);

            # DWIM: treat a '=' operator as '=='
            $rest =~ s/^\s*=(?![~=])/==/;

            # DWIM: autoquote RHS barewords in string and regex ops
            $rest =~ s/^(\s+(?:eq|ne)\s+)([\w.,-]+)$/$1"$2"/;
            $rest =~ s/^(\s*(?:=~|!~)\s*)([\w.,-]+)$/$1"$2"/;

            # check for reversed match ops
            if ($rest =~ /~[=!]/) {
                die "psgrep: can't understand '$rest'"
                  . " (you might have your =~ or !~ turned around)\n";
            }

            push @ops, [ $keyword, $rest ];
        }
        else {
            if (($arg =~ /^$COMPARISON_OPS/o) or ($arg !~ /\s/)) {
                die "psgrep: can't understand $arg"
                  . " (perhaps you need quotes?)\n";
            }
            else {
                die "psgrep: can't understand $arg\n";
            }
        }
    }

    return(@ops);
}


sub run_ps {
    my @keywords = @_;
    my @lines;

    if ($DEBUG_PSDATA_FILE) {
        # use ps output from file, for testing and debugging
        open my $fh, '<', $DEBUG_PSDATA_FILE
            or die "psgrep: can't open $DEBUG_PSDATA_FILE, $!\n";
        @lines = grep { $_ !~ /^#/ } (<$fh>);
        close $fh;
    }
    else {
        # normal flow, run ps command
        my $kw_str = join(',', @keywords);

        warn "PS: ps ax -o${kw_str}\n\n" if $DEBUG;
        open my $ps_fh, '-|', "ps", "ax", "-o${kw_str}"
            or die "psgrep: can't run ps, exiting\n";
        @lines = (<$ps_fh>);
        close $ps_fh;
    }
    return @lines;
}

sub grep_ps {
    my @keywords = @{shift(@_)};
    my @ops      = @{shift(@_)};

    # make sure ppid is included so we can find and ignore ourselves
    if (none { $_ eq 'ppid' } @keywords) {
        unshift @keywords, 'ppid';
    }
    my @ps_lines = run_ps(@keywords);
    return select_ps_lines(\@keywords, \@ops, @ps_lines);
}


sub _dump_debug_run_info {
    my $keywords  = shift;
    my $ops       = shift;
    my $perl_eval = shift;

    print STDERR "KEYWORDS: " . Dumper($keywords)  . "\n";
    print STDERR "OPS: "      . Dumper($ops)       . "\n";
    print STDERR "PERL EVAL: '$perl_eval'\n\n";
}

sub _deparse {
    my $perl_eval = shift;

    # deparse the code we're going to eval, because you and Perl
    # might have different ideas of what your code does
    use B::Deparse;
    no strict;
    no warnings qw/uninitialized once/;

    print STDERR "DEPARSE:\n";
    my $code = <<END_CODE;
\$bdp = B::Deparse->new('-p','-x7');
print STDERR (\$bdp->coderef2text( sub { $perl_eval } ), "\n\n");
END_CODE

    eval $code or warn "deparse died, $!";
}

# takes a list of lines from ps output and returns an array of hashrefs
sub select_ps_lines {
    my @keywords = @{shift(@_)};
    my @ops      = @{shift(@_)};
    my @ps_lines = @_;

    # build the perl to do the evaluations
    my $perl_eval;
    OP: foreach my $op_ref (@ops) {
        my ($keyword, $op) = @{$op_ref};
        $perl_eval .= ' && ' if $perl_eval;
        $perl_eval .= "(\$fields{" . $keyword . "} $op)";
    }

    if ($DEBUG) {
        _dump_debug_run_info(\@keywords, \@ops, $perl_eval);
    }

    #read the first line
    my $num_keywords = scalar @keywords;
    my %lengths;
    my @selected;
    my $line_num = 0;
    my $psdump;
    PROCESS: foreach my $line (@ps_lines) {
        chomp $line;
        $line_num++;

        my %fields;
        @fields{@keywords} = split(' ', $line, $num_keywords);

        if ($line_num == 1) {
            # create a faux process record with the headers and lengths
            my %headers;
            @headers{@keywords} = map { uc $_ } @keywords;
            push @selected, \%headers;
            tally_lengths(\%lengths, \%headers);

            # save headers if necessary
            $psdump = "$line\n" if $DUMP_PSDATA_FILE;

            next PROCESS;
        }

        # ignore ourselves
        next PROCESS if $fields{'pid'} == $$ or $fields{'ppid'} == $$;

        # if we get here, save for dumping if necessary
        $psdump .= "$line\n" if $DUMP_PSDATA_FILE;

        # deparse the eval string if debugging
        if ($DEBUG && !$DEBUG_DID_DP) {
            _deparse($perl_eval);
            $DEBUG_DID_DP = 1;
        }

        # run the eval
        my $ok;
        {
            no strict;
            no warnings qw/uninitialized once/;
            $ok = eval "$perl_eval";
        }

        if ($ok) {
            # we've got a match, record it
            tally_lengths(\%lengths, \%fields);
            push @selected, \%fields;
        }
        else {
            if ($@) {
                die "psgrep: perl error (line $line_num): $@";
            }
        }
    }

    _dump_ps_output($psdump, \@keywords) if $DUMP_PSDATA_FILE;

    push @selected, \%lengths; # being lazy
    return(@selected);
}


# save off a dump of ps(1) output for testing
sub _dump_ps_output {
    my $psdata = shift;
    my $kwref  = shift;

    my $pscmd  = "ps ax -o" . join(',', @{$kwref});

    use Config;
    my $osname = $Config{osname};
    my $osvers = $Config{osvers};

    open my $dumpfh, '>', $DUMP_PSDATA_FILE
        or die "cannot open debug file $DUMP_PSDATA_FILE, $!\n";
    print $dumpfh "# Output of '$pscmd' on ${osname}_${osvers}\n";
    print $dumpfh "# " . localtime(time) . "\n";
    print $dumpfh $psdata;
    close $dumpfh or die "could not write debug file $DUMP_PSDATA_FILE, $!\n";
}


sub tally_lengths {
    my $lengths_ref = shift;
    my $fields_ref  = shift;

    no warnings 'uninitialized';
    foreach my $field (keys %{$fields_ref}) {
        $lengths_ref->{$field} = max(
            $lengths_ref->{$field},
            length($fields_ref->{$field}),
        );
    }
}


sub build_format_str {
    my @keywords = @{shift(@_)};
    my %lengths  = %{shift(@_)};

    my $str;
    # build a string based on the lengths of all but the last field
    for (my $i = 0; $i <= ($#keywords - 1); $i++) {
        my $key = $keywords[$i];
        my $len = $lengths{$key};
        $str .= "%-${len}s ";
    }

    # no length specifier on the last field
    $str .= "%s\n";
    return $str;
}


sub print_formatted {
    my $format_str = shift;
    my $keys_ref   = shift;
    my $proc_ref   = shift;

    return unless $proc_ref;

    my @keywords = @{$keys_ref};
    my %process  = %{$proc_ref};

    printf $format_str, @process{@keywords};
}



main();

=head1 NAME

psgrep - search for processes matching given criteria

=head1 SYNOPSIS

psgrep [--help|--man] [OPTIONS] [REGEX] '<KEYWORD op OPERAND>' ...

=head1 OPTIONS

=over 4

=item B<-f>, B<--long>

Print these fields for every process:
C<< uid pid ppid stat tty time command >>.
Any fields specified in comparison operations or with B<--output> will
also be printed. If both this option and B<--pid> are specified, B<--pid>
wins.

=item B<-o>, B<--output> KEYWORDS

In addition to any keywords specified in operations (and those that
B<--long> adds if you use it), also print the fields associated with the
keywords given. The option can be specified multiple times, and also
accepts multiple comma-delimited keywords, after the B<-o> option in
I<ps>. If you also give B<--pid>, that wins.

=item B<-p>, B<--pid>

Print only the PIDs of the matching processes. Giving B<-p> overrides
any use of B<-f> or B<-o>.

=item B<-h>, B<--help>

Prints a usage and options summary.

=item B<--man>

Displays the manual.

=back

=head1 DESCRIPTION

B<psgrep> prints information about processes matching given criteria.
You can make comparisons against any keyword that your I<ps> command's
B<-o> option supports.

B<psgrep> assumes by default that you're running it interactively and
want to see the process information that you're comparing against. So
comparing against a field automatically causes that field to be printed.
(You can print additional fields with the B<-l> and B<-o> options.)

If you give the B<-p> option, B<psgrep> will print only the PID
of matching processes without a header, no matter what other options you
give, or what kind of comparison operations you specify.

=head1 OPERATIONS

An operation is a comparison against some piece of data (a "field")
about a process. You specify the field by its name (or "keyword"). The
available fields and their interpretations vary from system to system.
For a full list of fields, see the documentation for B<-o> in ps(1).

Operations are of the form:

    KEYWORD op OPERAND

For example:

    user eq 'root'
    pid > 1
    command =~ /http/

The field name (or "keyword") must be a single word (in perl, it must
look like an identifier). Only alphanumeric keywords are accepted.
The entire operation must be in a single shell argument. Quote as
necessary.

You can specify multiple operations: 

    psgrep uid==0 'command =~ /sh/'

All operations must return true for a process to match (i.e. they're
&&'d together).

=head2 Operators

The available operators are:

    == or =, >, >=, <, <=    numeric comparison
    eq, ne                   string comparison
    =~, !~                   regex pattern match

The operations are performed as in Perl; B<psgrep> builds perl code that
actually performs the operations. 

=head2 Keywords

A few common ones are:

    command     command and arguments
    pid         process's group ID
    pcpu        percentage CPU usage
    pid         process ID
    ppid        parent process ID
    rss         resident set size
    stat        symbolic process state
    tty         full name of control terminal
    uid         process's user ID
    user        user name (from uid)
    vsz         virtual memory size of the process

Again, both the available fields and their interpretations vary
from system to system. See ps(1) for a complete list for your system.

=head2 Initial Regex Argument

For convenience, B<psgrep> treats the first argument specially. The first
argument need not have a comparison operator. If not, it is treated as a
case-insensitive regex match against the I<command> field. This makes the
simple case simple:

    psgrep http      # matches "httpd" or "wget http://example.com/"
    psgrep mail      # "Mail", "mail", "mailx", "sendmail" ...

You can surround an initial regex with slashes; this lets you use the C<i>,
C<x>, C<a>, C<u>, C<d>, and C<l> regex modifiers (when available on your
version of Perl). Slashes turn off the automatic C</i> behavior; you must
give it explicitly if you want it. The following commands are equivalent.

    psgrep perl                   # automatically case-insensitive
    psgrep /Perl/i                # requires /i
    psgrep 'command =~ m/Perl/i'

You can add additional operations after the initial regex:

    psgrep /sh$/ uid==0
    psgrep http 'state =~ /[UZ]/'

When you use an initial I<command> regex with other operations, the
regular operations must come I<after> the regex. A bare regex anywhere
but as the first non-option argument is an error.

Note that you'll typically have to quote the use of brackets from your
shell, since they're used in shell globbing syntax. Strictly speaking,
you don't have to quote constructs that don't interfere
with shell syntax, but it's often a good idea.

=head1 DIAGNOSTICS

=over 4

=item "can't understand <ARG>"

What you gave doesn't look like an operation to B<psgrep>. Operations
should look like C<KEYWORD op OPERAND>. In particular, I<KEYWORD> must
be an alphanumeric string, and I<operator> must be one of the operators
given above.

You might have not quoted a comparison operation. If B<psgrep> thinks
that's the case, it'll add "perhaps you need quotes?".

    psgrep ppid = 1  # should be: psgrep 'ppid = 1'
                     # or: psgrep ppid=1

You might also have used the one-argument regex syntax after having
already used a standard C<KEYWORD op OPERAND> operation. That "bare
regex" is only recognized as the first non-option argument, like this:

    psgrep httpd uid==501  # not: psgrep uid==501 httpd

=item "can't run ps, exiting"

For some reason, B<psgrep> couldn't find or execute your B<ps>
program. Maybe the PATH isn't set up right?

=item "<ARG>: keyword not found"

C<ps -o> on your system doesn't know what <ARG> means. See ps(1) for
a list of keywords that will work for you.

=item "perl error (line <NUM>): <some perl error>"

Something you passed made Perl's compiler die. This can happen if your
operand isn't something perl recognizes. (The operand is not parsed by
B<psgrep> and is passed directly to perl.) Most warnings are promoted to
fatal errors with C<< use warnings FATAL >>.

=back

=head1 CAVEATS

ps(1) is notoriously different between SysV-influenced systems and
BSD-influenced systems. Since B<psgrep> scrapes I<ps>'s output, it
will not work properly if your local I<ps> doesn't work how it expects.
B<psgrep> requires that your I<ps> support the BSD-style B<axw>
options, and the POSIX/SUS B<-o> option.

B<psgrep> has been tested on OpenBSD 4.7, RedHat Enterprise Linux 4-6,
Debian GNU/Linux 6, and Mac OS X 10.6 and 10.7.

=head1 BUGS

B<psgrep> assumes that no output field but C<command> will contain
spaces. If this isn't true (and on some systems it isn't), B<psgrep>
will mis-parse the output from I<ps>. The C<args> keyword is an
alias of C<command> on many systems, and will cause this behavior.
This may be fixed in the future. For now, don't do that.

=head1 SEE ALSO

ps(1), perlop(1), perlre(1)

=head1 AUTHOR

Copyright 2012 Aaron Hall. <ahall@vitaphone.net>

This B<psgrep> script is made available under the terms of the Artistic
License 2.0, distributed with this script (see the LICENSE file),
and also available at
L<http://www.perlfoundation.org/artistic_license_2_0>.

=head1 HISTORY

Inspired by the "psgrep" program given as an example at the end of
Chapter 1 of Perl Cookbook, 1st. Ed., by Tom Christiansen and Nat
Torkington (O'Reilly and Associates, 1998). It takes a somewhat different
approach and shares no code with that "psgrep", though.

=cut
